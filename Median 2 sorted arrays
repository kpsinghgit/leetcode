
public class Leetcode4 {

	static int[] A = {1,3,4};
	static int[] B = {2,4,5};
	public static void main(String ... arg){
		System.out.println(Solution.findMedianSortedArrays(A, B));
	}
}

class Solution {
    
    static int counter = 0;
    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
	    int l = (m + n + 1) / 2;
	    int r = (m + n + 2) / 2;
        System.out.println("A = " + getMedian(nums1, 0, nums2, 0, l));
        System.out.println("B = " + getMedian(nums1, 0, nums2, 0, r));
        return (getMedian(nums1, 0, nums2, 0, l) + getMedian(nums1, 0, nums2, 0, r))/2.0;
    }
    
    public static double getMedian(int [] num1, int i, int [] num2, int j, int k){
//        System.out.println("Counter is : " + counter++);
        System.out.println("i = "+ i+ " ,j = "+ j + " ,k = " + k);
        if(i> num1.length - 1){
            System.out.println("i exceeded: Returning - " +  num2[j + k - 1]);
             return num2[j + k - 1];    
        }
        
        if( j > num2.length -1 ){
            System.out.println("j exceeded : Returning - " +  num1[i + k - 1]);
             return num1[i + k - 1];    
        }
                
        if (k == 1) {
        	System.out.println("k==1");
        	return Math.min(num1[i], num2[j]);
        }
        int aMid = Integer.MAX_VALUE, bMid = Integer.MAX_VALUE;
        if(i + k/2 - 1 < num1.length) aMid = num1[i + k/2 - 1];
        if(j + k/2 - 1 < num2.length) bMid = num2[j + k/2 - 1];
        if (aMid < bMid){
            return getMedian(num1,i + k/2, num2, j, k-k/2 );
        }
        else{
            return getMedian(num1,i, num2, j + k/2, k-k/2 );
        }
    }
}
